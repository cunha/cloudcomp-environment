- name: Check for Users' Namespace
  become: True
  shell: kubectl get ns -o=jsonpath='{range .items..metadata}{.name}{"\n"}{end}' | grep {{user.username}}
  register: user_namespace
  failed_when: user_namespace.rc != 1 and user_namespace.rc != 0

- name: Create User Namespace
  become: True
  when: user_namespace.stdout == ""
  shell: kubectl create ns {{user.username}}

- name: Setup User Account Info
  become: True
  block:
    - name: Generate Storage Class Configuration
      become: true
      template:
        src: "k8s-storage-class.yml.j2"
        dest: "~/k8s-configs/k8s-storage-class-{{user.username}}.yml"

    - name: Create StorageClass
      become: true
      shell: kubectl apply -f ~/k8s-configs/k8s-storage-class-{{user.username}}.yml

    - name: Generate file with user k8s configuration
      template:
        src: "k8s-user.yml.j2"
        dest: "~/k8s-configs/k8s-user-{{user.username}}.yml"

    - name: Applying k8s user configurations
      raw: kubectl apply -f ~/k8s-configs/k8s-user-{{user.username}}.yml

    - name: Running kubeconfig generation script for admins
      shell: ~/k8s-configs/generate-user-k8s-config.sh {{ user.username }} {{ current_machine_ipaddress }} {{ cluster_name }}

    - name: Creating PersistentVolume folders
      file:
        path: /home/{{ user.username }}/{{ pv_basename }}
        state: directory
        owner: "{{ user.username }}"
        group: "{{ user.username }}"

    - name: Generate file with user PersistentVolume configuration
      become: true
      template:
        src: "k8s-user-pv.yml.j2"
        dest: "~/k8s-configs/k8s-user-pv-{{user.username}}.yml"

    - name: Applying k8s configurations for PersistentVolumes
      become: true
      raw: kubectl apply -f ~/k8s-configs/k8s-user-pv-{{user.username}}.yml

  tags:
    - kubernetes
    - user setup
